syntax = "proto3";

package eventstore.streaming;

import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

option csharp_namespace = "EventStore.Streaming.Schema";

// Service for doing schema-related operations.
service SchemaService {
  // Create or update a schema.
  rpc Create(CreateSchema) returns (CreateSchema.Response);

  // Create or update a schema.
  rpc CreateOrUpdate(CreateOrUpdateSchema) returns (CreateOrUpdateSchema.Response);

  // Get the last schema for a given subject.
  rpc GetLatest(GetLatestSchema) returns (GetLatestSchema.Response);

  // Check compatibility between the provided and actual schema revisions.
  rpc CheckCompatibility(CheckSchemaCompatibility) returns (CheckSchemaCompatibility.Response) {}
}

// Schema compatibility modes
enum CompatibilityMode {
  COMPATIBILITY_MODE_UNSPECIFIED = 0;  // Default value, should not be used

  // BACKWARD compatibility ensures that new schema versions can be read by
  // clients using older schema versions. This allows for schema evolution with
  // the addition of new optional fields or types.
  COMPATIBILITY_MODE_BACKWARD = 1;

  // FORWARD compatibility ensures that new clients can read data produced with
  // older schema versions. This allows for schema evolution with the removal
  // of fields or types, but not the addition of required fields.
  COMPATIBILITY_MODE_FORWARD = 2;

  // FULL compatibility is the strictest mode, ensuring both backward and
  // forward compatibility. New schema versions must be fully compatible with
  // older versions, allowing only safe changes like adding optional fields or
  // types.
  COMPATIBILITY_MODE_FULL = 3;

  // NONE disables compatibility checks, allowing any kind of schema change.
  // This mode should be used with caution, as it may lead to compatibility
  // issues.
  COMPATIBILITY_MODE_NONE = 4;
}

enum SchemaType {
  SCHEMA_TYPE_UNDEFINED       = 0;
  SCHEMA_TYPE_JSON            = 1;
  SCHEMA_TYPE_PROTOCOL_BUFFER = 2;
  SCHEMA_TYPE_AVRO            = 3;
  SCHEMA_TYPE_BYTES           = 4;
}

message SchemaRevision {
  string                    revision_id = 1;
  bytes                     definition  = 2;
  int32                     version     = 3;
  google.protobuf.Timestamp created_at  = 4;
}

message Schema {
  string            subject            = 1;
  SchemaType        schema_type        = 2;
  SchemaRevision    revision           = 3;
  CompatibilityMode compatibility_mode = 4;  // The compatibility mode for this schema
}

message CreateSchema {
  string     subject     = 1;
  SchemaType schema_type = 2;
  bytes      definition  = 3;

  message Response {
    string                    revision_id = 1;
    int32                     version     = 2;
    google.protobuf.Timestamp created_at  = 3;
  }
}

message CreateOrUpdateSchema {
  string     subject     = 1;
  SchemaType schema_type = 2;
  bytes      definition  = 3;

  message Response {
    string                    revision_id = 1;
    int32                     version     = 2;
    google.protobuf.Timestamp created_at  = 3;
  }
}

message GetLatestSchema {
  string     subject     = 1;
  SchemaType schema_type = 2;

  message Response {
    SchemaRevision schema = 1;
  }
}

message GetSchema {
  string revision_id = 1;

  message Response {
    Schema schema = 1;
  }
}

message CheckSchemaCompatibility {
  string     subject     = 1;
  SchemaType schema_type = 2;
  bytes      definition  = 3;

  message Response {
    bool   is_compatible         = 1;  // Indicates whether the new schema is compatible with the base version
    string compatibility_details = 2;  // Additional details about the compatibility check
  }
}
